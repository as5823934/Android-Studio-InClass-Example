/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gatebuzz.oxfordapi.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Entry
 */
public class Entry   {
  @SerializedName("etymologies")
  private String[] etymologies = null;

  @SerializedName("grammaticalFeatures")
  private GrammaticalFeaturesList grammaticalFeatures = null;

  @SerializedName("homographNumber")
  private String homographNumber = null;

  @SerializedName("notes")
  private CategorizedTextList notes = null;

  @SerializedName("pronunciations")
  private PronunciationsList pronunciations = null;

  @SerializedName("senses")
  private List<Sense> senses = new ArrayList<Sense>();

  @SerializedName("variantForms")
  private VariantFormsList variantForms = null;

  public Entry etymologies(String[] etymologies) {
    this.etymologies = etymologies;
    return this;
  }

   /**
   * The origin of the word and the way in which its meaning has changed throughout history
   * @return etymologies
  **/
  public String[] getEtymologies() {
    return etymologies;
  }

  public void setEtymologies(String[] etymologies) {
    this.etymologies = etymologies;
  }

  public Entry grammaticalFeatures(GrammaticalFeaturesList grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

   /**
   * Get grammaticalFeatures
   * @return grammaticalFeatures
  **/
  public GrammaticalFeaturesList getGrammaticalFeatures() {
    return grammaticalFeatures;
  }

  public void setGrammaticalFeatures(GrammaticalFeaturesList grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
  }

  public Entry homographNumber(String homographNumber) {
    this.homographNumber = homographNumber;
    return this;
  }

   /**
   * Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.
   * @return homographNumber
  **/
  public String getHomographNumber() {
    return homographNumber;
  }

  public void setHomographNumber(String homographNumber) {
    this.homographNumber = homographNumber;
  }

  public Entry notes(CategorizedTextList notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  public CategorizedTextList getNotes() {
    return notes;
  }

  public void setNotes(CategorizedTextList notes) {
    this.notes = notes;
  }

  public Entry pronunciations(PronunciationsList pronunciations) {
    this.pronunciations = pronunciations;
    return this;
  }

   /**
   * Get pronunciations
   * @return pronunciations
  **/
  public PronunciationsList getPronunciations() {
    return pronunciations;
  }

  public void setPronunciations(PronunciationsList pronunciations) {
    this.pronunciations = pronunciations;
  }

  public Entry senses(List<Sense> senses) {
    this.senses = senses;
    return this;
  }

  public Entry addSensesItem(Sense sensesItem) {
    this.senses.add(sensesItem);
    return this;
  }

   /**
   * Complete list of senses
   * @return senses
  **/
  public List<Sense> getSenses() {
    return senses;
  }

  public void setSenses(List<Sense> senses) {
    this.senses = senses;
  }

  public Entry variantForms(VariantFormsList variantForms) {
    this.variantForms = variantForms;
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g 'a' and 'an'
   * @return variantForms
  **/
  public VariantFormsList getVariantForms() {
    return variantForms;
  }

  public void setVariantForms(VariantFormsList variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entry entry = (Entry) o;
    return Objects.equals(this.etymologies, entry.etymologies) &&
        Objects.equals(this.grammaticalFeatures, entry.grammaticalFeatures) &&
        Objects.equals(this.homographNumber, entry.homographNumber) &&
        Objects.equals(this.notes, entry.notes) &&
        Objects.equals(this.pronunciations, entry.pronunciations) &&
        Objects.equals(this.senses, entry.senses) &&
        Objects.equals(this.variantForms, entry.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etymologies, grammaticalFeatures, homographNumber, notes, pronunciations, senses, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entry {\n");
    
    sb.append("    etymologies: ").append(toIndentedString(etymologies)).append("\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    homographNumber: ").append(toIndentedString(homographNumber)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    senses: ").append(toIndentedString(senses)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

